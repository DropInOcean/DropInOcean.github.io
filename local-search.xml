<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Segment Metric</title>
    <link href="/2023/10/08/deeep_learning/segment_metric/"/>
    <url>/2023/10/08/deeep_learning/segment_metric/</url>
    
    <content type="html"><![CDATA[<h2 id="Dice"><a href="#Dice" class="headerlink" title="Dice"></a>Dice</h2><p>TP：True Positive,被判定为正样本，事实上也是正样本<br>TN：True Negative,被判定为负样本，事实上也是负样本<br>FP：False Positive,被判定为正样本，但事实上是负样本<br>FN：False Negative,被判定为负样本，但事实上是正样本</p><p>Dice &#x3D; 2TP&#x2F;(2TP+FP+FN)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dice_coefficient</span>(<span class="hljs-params">y_true, y_pred, smooth=<span class="hljs-number">1e-6</span></span>):<br>    <br>    intersection = np.<span class="hljs-built_in">sum</span>(y_true * y_pred)<br>    union = np.<span class="hljs-built_in">sum</span>(y_true) + np.<span class="hljs-built_in">sum</span>(y_pred)<br>    <br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">2.</span> * intersection + smooth) / (union + smooth)<br><br><span class="hljs-comment"># Example</span><br><span class="hljs-comment"># y_true = ...  # Ground truth mask. Should be a binary numpy array with shape [H, W].</span><br><span class="hljs-comment"># y_pred = ...  # Predicted mask. Should be a binary numpy array with shape [H, W].</span><br><span class="hljs-comment"># dice = dice_coefficient(y_true, y_pred)</span><br><span class="hljs-comment"># print(f&quot;Dice Coefficient: &#123;dice&#125;&quot;)</span><br><br></code></pre></td></tr></table></figure><h2 id="IOU"><a href="#IOU" class="headerlink" title="IOU"></a>IOU</h2><p><img src="/img/IOU.png" alt="IOU"></p><h2 id="Hausdorff-95"><a href="#Hausdorff-95" class="headerlink" title="Hausdorff_95"></a>Hausdorff_95</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/117435908">https://zhuanlan.zhihu.com/p/117435908</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Deep_learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>segment_metric</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Metric</title>
    <link href="/2023/10/06/deeep_learning/%E4%BC%A0%E7%BB%9F%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95/"/>
    <url>/2023/10/06/deeep_learning/%E4%BC%A0%E7%BB%9F%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Deep_learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>metric</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Diffusion</title>
    <link href="/2023/10/06/Diffusion/diffusion/"/>
    <url>/2023/10/06/Diffusion/diffusion/</url>
    
    <content type="html"><![CDATA[<h2 id="DDPM"><a href="#DDPM" class="headerlink" title="DDPM"></a>DDPM</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> keras <span class="hljs-keyword">import</span> backend <span class="hljs-keyword">as</span> K<br><span class="hljs-keyword">from</span> keras.models <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> keras.callbacks <span class="hljs-keyword">import</span> Callback<br><span class="hljs-keyword">from</span> keras.initializers <span class="hljs-keyword">import</span> VarianceScaling<br><span class="hljs-keyword">from</span> keras_preprocessing.image <span class="hljs-keyword">import</span> list_pictures<br><span class="hljs-keyword">from</span> bert4keras.layers <span class="hljs-keyword">import</span> ScaleOffset<br><span class="hljs-keyword">from</span> bert4keras.optimizers <span class="hljs-keyword">import</span> Adam<br><span class="hljs-keyword">from</span> bert4keras.optimizers <span class="hljs-keyword">import</span> extend_with_layer_adaptation<br><span class="hljs-keyword">from</span> bert4keras.optimizers <span class="hljs-keyword">import</span> extend_with_piecewise_linear_lr<br><span class="hljs-keyword">from</span> bert4keras.optimizers <span class="hljs-keyword">import</span> extend_with_exponential_moving_average<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> warnings<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>)  <span class="hljs-comment"># 忽略keras带来的满屏警告</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;samples&#x27;</span>):<br>    os.mkdir(<span class="hljs-string">&#x27;samples&#x27;</span>)<br><br><span class="hljs-comment"># 基本配置</span><br>imgs = list_pictures(<span class="hljs-string">&#x27;/root/CelebA-HQ/train/&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>)<br>imgs += list_pictures(<span class="hljs-string">&#x27;/root/CelebA-HQ/valid/&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>)<br>np.random.shuffle(imgs)<br>img_size = <span class="hljs-number">128</span>  <span class="hljs-comment"># 如果只想快速实验，可以改为64</span><br>batch_size = <span class="hljs-number">64</span>  <span class="hljs-comment"># 如果显存不够，可以降低为32、16，但不建议低于16</span><br>embedding_size = <span class="hljs-number">128</span><br>channels = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]<br>num_layers = <span class="hljs-built_in">len</span>(channels) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>blocks = <span class="hljs-number">2</span>  <span class="hljs-comment"># 如果显存不够，可以降低为1</span><br>min_pixel = <span class="hljs-number">4</span>  <span class="hljs-comment"># 不建议降低，显存足够可以增加到8</span><br><br><span class="hljs-comment"># 超参数选择</span><br>T = <span class="hljs-number">1000</span><br>alpha = np.sqrt(<span class="hljs-number">1</span> - <span class="hljs-number">0.02</span> * np.arange(<span class="hljs-number">1</span>, T + <span class="hljs-number">1</span>) / T)<br>beta = np.sqrt(<span class="hljs-number">1</span> - alpha**<span class="hljs-number">2</span>)<br>bar_alpha = np.cumprod(alpha)<br>bar_beta = np.sqrt(<span class="hljs-number">1</span> - bar_alpha**<span class="hljs-number">2</span>)<br>sigma = beta.copy()<br><span class="hljs-comment"># sigma *= np.pad(bar_beta[:-1], [1, 0]) / bar_beta</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">imread</span>(<span class="hljs-params">f, crop_size=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;读取图片</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    x = cv2.imread(f)<br>    height, width = x.shape[:<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> crop_size <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        crop_size = <span class="hljs-built_in">min</span>([height, width])<br>    <span class="hljs-keyword">else</span>:<br>        crop_size = <span class="hljs-built_in">min</span>([crop_size, height, width])<br>    height_x = (height - crop_size + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>    width_x = (width - crop_size + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>    x = x[height_x:height_x + crop_size, width_x:width_x + crop_size]<br>    <span class="hljs-keyword">if</span> x.shape[:<span class="hljs-number">2</span>] != (img_size, img_size):<br>        x = cv2.resize(x, (img_size, img_size))<br>    x = x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    x = x / <span class="hljs-number">255</span> * <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">imwrite</span>(<span class="hljs-params">path, figure</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;归一化到了[-1, 1]的图片矩阵保存为图片</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    figure = (figure + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> * <span class="hljs-number">255</span><br>    figure = np.<span class="hljs-built_in">round</span>(figure, <span class="hljs-number">0</span>).astype(<span class="hljs-string">&#x27;uint8&#x27;</span>)<br>    cv2.imwrite(path, figure)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_generator</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;图片读取</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    batch_imgs = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.random.permutation(<span class="hljs-built_in">len</span>(imgs)):<br>            batch_imgs.append(imread(imgs[i]))<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(batch_imgs) == batch_size:<br>                batch_imgs = np.array(batch_imgs)<br>                batch_steps = np.random.choice(T, batch_size)<br>                batch_bar_alpha = bar_alpha[batch_steps][:, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]<br>                batch_bar_beta = bar_beta[batch_steps][:, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]<br>                batch_noise = np.random.randn(*batch_imgs.shape)<br>                batch_noisy_imgs = batch_imgs * batch_bar_alpha + batch_noise * batch_bar_beta<br>                <span class="hljs-keyword">yield</span> [batch_noisy_imgs, batch_steps[:, <span class="hljs-literal">None</span>]], batch_noise<br>                batch_imgs = []<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupNorm</span>(<span class="hljs-title class_ inherited__">ScaleOffset</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;定义GroupNorm，默认groups=32</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs</span>):<br>        inputs = K.reshape(inputs, (-<span class="hljs-number">1</span>, <span class="hljs-number">32</span>), -<span class="hljs-number">1</span>)<br>        mean, variance = tf.nn.moments(inputs, axes=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], keepdims=<span class="hljs-literal">True</span>)<br>        inputs = (inputs - mean) * tf.rsqrt(variance + <span class="hljs-number">1e-6</span>)<br>        inputs = K.flatten(inputs, -<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(GroupNorm, self).call(inputs)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dense</span>(<span class="hljs-params">x, out_dim, activation=<span class="hljs-literal">None</span>, init_scale=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Dense包装</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    init_scale = <span class="hljs-built_in">max</span>(init_scale, <span class="hljs-number">1e-10</span>)<br>    initializer = VarianceScaling(init_scale, <span class="hljs-string">&#x27;fan_avg&#x27;</span>, <span class="hljs-string">&#x27;uniform&#x27;</span>)<br>    <span class="hljs-keyword">return</span> Dense(<br>        out_dim,<br>        activation=activation,<br>        use_bias=<span class="hljs-literal">False</span>,<br>        kernel_initializer=initializer<br>    )(x)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conv2d</span>(<span class="hljs-params">x, out_dim, activation=<span class="hljs-literal">None</span>, init_scale=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Conv2D包装</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    init_scale = <span class="hljs-built_in">max</span>(init_scale, <span class="hljs-number">1e-10</span>)<br>    initializer = VarianceScaling(init_scale, <span class="hljs-string">&#x27;fan_avg&#x27;</span>, <span class="hljs-string">&#x27;uniform&#x27;</span>)<br>    <span class="hljs-keyword">return</span> Conv2D(<br>        out_dim, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>),<br>        padding=<span class="hljs-string">&#x27;same&#x27;</span>,<br>        activation=activation,<br>        use_bias=<span class="hljs-literal">False</span>,<br>        kernel_initializer=initializer<br>    )(x)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">residual_block</span>(<span class="hljs-params">x, ch, t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;残差block</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    in_dim = K.int_shape(x)[-<span class="hljs-number">1</span>]<br>    out_dim = ch * embedding_size<br>    <span class="hljs-keyword">if</span> in_dim == out_dim:<br>        xi = x<br>    <span class="hljs-keyword">else</span>:<br>        xi = dense(x, out_dim)<br>    x = Add()([x, dense(t, K.int_shape(x)[-<span class="hljs-number">1</span>])])<br>    x = conv2d(x, out_dim, <span class="hljs-string">&#x27;swish&#x27;</span>, <span class="hljs-number">1</span> / num_layers**<span class="hljs-number">0.5</span>)<br>    x = conv2d(x, out_dim, <span class="hljs-string">&#x27;swish&#x27;</span>, <span class="hljs-number">1</span> / num_layers**<span class="hljs-number">0.5</span>)<br>    x = Add()([x, xi])<br>    x = GroupNorm()(x)<br>    <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">l2_loss</span>(<span class="hljs-params">y_true, y_pred</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;用l2距离为损失，不能用mse代替</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> K.<span class="hljs-built_in">sum</span>((y_true - y_pred)**<span class="hljs-number">2</span>, axis=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><br><br><span class="hljs-comment"># 搭建去噪模型</span><br>x_in = x = Input(shape=(img_size, img_size, <span class="hljs-number">3</span>))<br>t_in = Input(shape=(<span class="hljs-number">1</span>,))<br>t = Embedding(input_dim=T, output_dim=embedding_size)(t_in)<br>t = Lambda(<span class="hljs-keyword">lambda</span> t: t[:, <span class="hljs-literal">None</span>])(t)<br><br>x = conv2d(x, embedding_size)<br>inputs, skip_pooling = [x], <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(channels):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(blocks):<br>        x = residual_block(x, ch, t)<br>        inputs.append(x)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">min</span>(K.int_shape(x)[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]) &gt; min_pixel:<br>        x = AveragePooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))(x)<br>        inputs.append(x)<br>    <span class="hljs-keyword">else</span>:<br>        skip_pooling += <span class="hljs-number">1</span><br><br>x = residual_block(x, ch, t)<br>inputs.pop()<br><br><span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(channels[::-<span class="hljs-number">1</span>]):<br>    <span class="hljs-keyword">if</span> i &gt;= skip_pooling:<br>        x = UpSampling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))(x)<br>        x = Add()([x, inputs.pop()])<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(blocks):<br>        xi = inputs.pop()<br>        x = residual_block(x, K.int_shape(xi)[-<span class="hljs-number">1</span>] // embedding_size, t)<br>        x = Add()([x, xi])<br><br>x = GroupNorm()(x)<br>x = conv2d(x, <span class="hljs-number">3</span>)<br><br>model = Model(inputs=[x_in, t_in], outputs=x)<br>model.summary()<br><br>OPT = extend_with_layer_adaptation(Adam)<br>OPT = extend_with_piecewise_linear_lr(OPT)  <span class="hljs-comment"># 此时就是LAMB优化器</span><br>OPT = extend_with_exponential_moving_average(OPT)  <span class="hljs-comment"># 加上滑动平均</span><br>optimizer = OPT(<br>    learning_rate=<span class="hljs-number">1e-3</span>,<br>    ema_momentum=<span class="hljs-number">0.9999</span>,<br>    exclude_from_layer_adaptation=[<span class="hljs-string">&#x27;Norm&#x27;</span>, <span class="hljs-string">&#x27;bias&#x27;</span>],<br>    lr_schedule=&#123;<br>        <span class="hljs-number">4000</span>: <span class="hljs-number">1</span>,  <span class="hljs-comment"># Warmup步数</span><br>        <span class="hljs-number">20000</span>: <span class="hljs-number">0.5</span>,<br>        <span class="hljs-number">40000</span>: <span class="hljs-number">0.1</span>,<br>    &#125;<br>)<br>model.<span class="hljs-built_in">compile</span>(loss=l2_loss, optimizer=optimizer)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample</span>(<span class="hljs-params">path=<span class="hljs-literal">None</span>, n=<span class="hljs-number">4</span>, z_samples=<span class="hljs-literal">None</span>, t0=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;随机采样函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> z_samples <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        z_samples = np.random.randn(n**<span class="hljs-number">2</span>, img_size, img_size, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">else</span>:<br>        z_samples = z_samples.copy()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(t0, T), ncols=<span class="hljs-number">0</span>):<br>        t = T - t - <span class="hljs-number">1</span><br>        bt = np.array([[t]] * z_samples.shape[<span class="hljs-number">0</span>])<br>        z_samples -= beta[t]**<span class="hljs-number">2</span> / bar_beta[t] * model.predict([z_samples, bt])<br>        z_samples /= alpha[t]<br>        z_samples += np.random.randn(*z_samples.shape) * sigma[t]<br>    x_samples = np.clip(z_samples, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> path <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> x_samples<br>    figure = np.zeros((img_size * n, img_size * n, <span class="hljs-number">3</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            digit = x_samples[i * n + j]<br>            figure[i * img_size:(i + <span class="hljs-number">1</span>) * img_size,<br>                   j * img_size:(j + <span class="hljs-number">1</span>) * img_size] = digit<br>    imwrite(path, figure)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample_inter</span>(<span class="hljs-params">path, n=<span class="hljs-number">4</span>, k=<span class="hljs-number">8</span>, sep=<span class="hljs-number">10</span>, t0=<span class="hljs-number">500</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;随机采样插值函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    figure = np.ones((img_size * n, img_size * (k + <span class="hljs-number">2</span>) + sep * <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>    x_samples = [imread(f) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> np.random.choice(imgs, n * <span class="hljs-number">2</span>)]<br>    X = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        figure[i * img_size:(i + <span class="hljs-number">1</span>) * img_size, :img_size] = x_samples[<span class="hljs-number">2</span> * i]<br>        figure[i * img_size:(i + <span class="hljs-number">1</span>) * img_size,<br>               -img_size:] = x_samples[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            lamb = <span class="hljs-number">1.</span> * j / (k - <span class="hljs-number">1</span>)<br>            x = x_samples[<span class="hljs-number">2</span> * i] * (<span class="hljs-number">1</span> - lamb) + x_samples[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>] * lamb<br>            X.append(x)<br>    x_samples = np.array(X) * bar_alpha[t0]<br>    x_samples += np.random.randn(*x_samples.shape) * bar_beta[t0]<br>    x_rec_samples = sample(z_samples=x_samples, t0=t0)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            ij = i * k + j<br>            figure[i * img_size:(i + <span class="hljs-number">1</span>) * img_size, img_size * (j + <span class="hljs-number">1</span>) +<br>                   sep:img_size * (j + <span class="hljs-number">2</span>) + sep] = x_rec_samples[ij]<br>    imwrite(path, figure)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trainer</span>(<span class="hljs-title class_ inherited__">Callback</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;训练回调器</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_epoch_end</span>(<span class="hljs-params">self, epoch, logs=<span class="hljs-literal">None</span></span>):<br>        model.save_weights(<span class="hljs-string">&#x27;model.weights&#x27;</span>)<br>        sample(<span class="hljs-string">&#x27;samples/%05d.png&#x27;</span> % (epoch + <span class="hljs-number">1</span>))<br>        optimizer.apply_ema_weights()<br>        model.save_weights(<span class="hljs-string">&#x27;model.ema.weights&#x27;</span>)<br>        sample(<span class="hljs-string">&#x27;samples/%05d_ema.png&#x27;</span> % (epoch + <span class="hljs-number">1</span>))<br>        optimizer.reset_old_weights()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    trainer = Trainer()<br>    model.fit(<br>        data_generator(),<br>        steps_per_epoch=<span class="hljs-number">2000</span>,<br>        epochs=<span class="hljs-number">10000</span>,  <span class="hljs-comment"># 只是预先设置足够多的epoch数，可以自行Ctrl+C中断</span><br>        callbacks=[trainer]<br>    )<br><br><span class="hljs-keyword">else</span>:<br><br>    model.load_weights(<span class="hljs-string">&#x27;model.ema.weights&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/bojone/Keras-DDPM">https://github.com/bojone/Keras-DDPM</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Deep_learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>diffusion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAN Metric</title>
    <link href="/2023/10/06/deeep_learning/gan_metric/"/>
    <url>/2023/10/06/deeep_learning/gan_metric/</url>
    
    <content type="html"><![CDATA[<h1 id="无监督"><a href="#无监督" class="headerlink" title="无监督"></a>无监督</h1><h2 id="IS-Inception-Score"><a href="#IS-Inception-Score" class="headerlink" title="IS(Inception Score)"></a>IS(Inception Score)</h2><p>评估生成图像的质量和多样性。就质量而言，使用Inception网络对生成的图像进行分类（标记），正确分类结果越集中，图像的质量就越高。就多样性而言，将生成的所有图像分类为不同的标签（熵较高）时，多样性就越大。</p><h2 id="FID"><a href="#FID" class="headerlink" title="FID"></a>FID</h2><p>使用Inception网络将生成图像集合和真实图像集合转换为保留图像高维信息的特征向量。假设这两个特征向量的分布为高斯分布，并计算其均值和协方差矩阵。通过测量概率分布之间的“距离”（相似程度）来评估生成图像与真实图像的相似程度。<br><img src="/img/fid1.png" alt="FID"><br><img src="/img/FID.png" alt="picture"></p><h1 id="有监督"><a href="#有监督" class="headerlink" title="有监督"></a>有监督</h1><h2 id="PSNR"><a href="#PSNR" class="headerlink" title="PSNR"></a>PSNR</h2><p><img src="/img/mse.png" alt="MSE"><br><img src="/img/psnr.png" alt="PSNR"></p><h2 id="SSIM"><a href="#SSIM" class="headerlink" title="SSIM"></a>SSIM</h2><p>对两个图像样本间的亮度 、对比度 、结构 三个方面进行比较衡量，可理解为一个描述了两幅图像相似度的评价指标</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/109342043">https://zhuanlan.zhihu.com/p/109342043</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Deep_learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gan_metric</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VAE</title>
    <link href="/2023/10/05/VAE/VAE/"/>
    <url>/2023/10/05/VAE/VAE/</url>
    
    <content type="html"><![CDATA[<h1 id="VAE"><a href="#VAE" class="headerlink" title="VAE"></a>VAE</h1><p>VAE结构：<br><img src="/img/vae.jpg" alt="vae_struct"></p><h2 id="重参数化"><a href="#重参数化" class="headerlink" title="重参数化"></a>重参数化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reparameterization</span>(<span class="hljs-params">self, mu, log_var</span>):<br>    epsilon = torch.randn_like(log_var)<br>    z = mu + epsilon * torch.sqrt(log_var.exp())<br>    <span class="hljs-keyword">return</span> z<br><br></code></pre></td></tr></table></figure><h2 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h2><p><img src="/img/VAEloss.png" alt="loss_KLD"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>loss_BCE = torch.nn.BCELoss(reduction = <span class="hljs-string">&#x27;sum&#x27;</span>)<br>loss_KLD = <span class="hljs-keyword">lambda</span> mu,sigma: -<span class="hljs-number">0.5</span> * torch.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> + torch.log(sigma**<span class="hljs-number">2</span>) - mu.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>) - sigma**<span class="hljs-number">2</span>)<br><br>loss_re = loss_BCE(re_imgs, imgs) <br>loss_norm = loss_KLD(mu, sigma) <br>loss = loss_re + loss_norm<br><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/620113235">https://zhuanlan.zhihu.com/p/620113235</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/348498294">https://zhuanlan.zhihu.com/p/348498294</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Deep_learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vae</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见loss</title>
    <link href="/2023/10/05/deeep_learning/loss/"/>
    <url>/2023/10/05/deeep_learning/loss/</url>
    
    <content type="html"><![CDATA[<h1 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h1><h2 id="MSE-loss"><a href="#MSE-loss" class="headerlink" title="MSE loss"></a>MSE loss</h2><p><img src="/img/MSEloss.png" alt="MSE loss"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = torch.nn.MSELoss()<br><span class="hljs-built_in">input</span> = torch.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, requires_grad=<span class="hljs-literal">True</span>)<br>target = torch.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>output = loss(<span class="hljs-built_in">input</span>, target)<br>output.backward()<br><br></code></pre></td></tr></table></figure><h2 id="Cross-Entropy-loss"><a href="#Cross-Entropy-loss" class="headerlink" title="Cross Entropy loss"></a>Cross Entropy loss</h2><p>交叉熵loss常用于分类任务</p><p>熵：<br><img src="/img/Entropy.png" alt="Entropy"></p><p>交叉熵：<br><img src="/img/crossloss.png" alt="Cross Entropy Loss"></p><p>二分类的交叉熵：<br><img src="/img/loss_01.png" alt="01 cross Loss"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># Example of target with class indices</span><br>loss = nn.CrossEntropyLoss()<br><span class="hljs-built_in">input</span> = torch.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, requires_grad=<span class="hljs-literal">True</span>)<br>target = torch.empty(<span class="hljs-number">3</span>, dtype=torch.long).random_(<span class="hljs-number">5</span>)<br>output = loss(<span class="hljs-built_in">input</span>, target)<br>output.backward()<br><span class="hljs-comment"># Example of target with class probabilities</span><br><span class="hljs-built_in">input</span> = torch.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, requires_grad=<span class="hljs-literal">True</span>)<br>target = torch.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>).softmax(dim=<span class="hljs-number">1</span>)<br>output = loss(<span class="hljs-built_in">input</span>, target)<br>output.backward()<br><br></code></pre></td></tr></table></figure><h2 id="对抗loss"><a href="#对抗loss" class="headerlink" title="对抗loss"></a>对抗loss</h2><p>最开始的GAN：</p><p>改进的WGAN：<br><img src="/img/GANloss.png" alt="wGAN"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GANLoss</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, use_lsgan=<span class="hljs-literal">True</span>, target_real_label=<span class="hljs-number">1.0</span>, target_fake_label=<span class="hljs-number">0.0</span>,</span><br><span class="hljs-params">                 tensor=torch.FloatTensor</span>):<br>        <span class="hljs-built_in">super</span>(GANLoss, self).__init__()<br>        self.real_label = target_real_label<br>        self.fake_label = target_fake_label<br>        self.real_label_var = <span class="hljs-literal">None</span><br>        self.fake_label_var = <span class="hljs-literal">None</span><br>        self.Tensor = tensor<br>        <span class="hljs-comment">#lsGAN or vanillaGAN</span><br>        <span class="hljs-keyword">if</span> use_lsgan:<br>            self.loss = nn.MSELoss()<br>        <span class="hljs-keyword">else</span>:<br>            self.loss = nn.BCELoss()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_target_tensor</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, target_is_real</span>):<br>        target_tensor = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> target_is_real:<br>            create_label = ((self.real_label_var <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>) <span class="hljs-keyword">or</span><br>                            (self.real_label_var.numel() != <span class="hljs-built_in">input</span>.numel()))<br>            <span class="hljs-keyword">if</span> create_label:<br>                real_tensor = self.Tensor(<span class="hljs-built_in">input</span>.size()).fill_(self.real_label)<br>                self.real_label_var = Variable(real_tensor, requires_grad=<span class="hljs-literal">False</span>)<br>            target_tensor = self.real_label_var<br>        <span class="hljs-keyword">else</span>:<br>            create_label = ((self.fake_label_var <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>) <span class="hljs-keyword">or</span><br>                            (self.fake_label_var.numel() != <span class="hljs-built_in">input</span>.numel()))<br>            <span class="hljs-keyword">if</span> create_label:<br>                fake_tensor = self.Tensor(<span class="hljs-built_in">input</span>.size()).fill_(self.fake_label)<br>                self.fake_label_var = Variable(fake_tensor, requires_grad=<span class="hljs-literal">False</span>)<br>            target_tensor = self.fake_label_var<br>        <span class="hljs-keyword">return</span> target_tensor<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, target_is_real</span>):<br>        target_tensor = self.get_target_tensor(<span class="hljs-built_in">input</span>, target_is_real)<br>        <span class="hljs-keyword">return</span> self.loss(<span class="hljs-built_in">input</span>, target_tensor)<br><br><br></code></pre></td></tr></table></figure><h2 id="KL-Divergence"><a href="#KL-Divergence" class="headerlink" title="KL Divergence"></a>KL Divergence</h2><p><img src="/img/KL.png" alt="KL loss"></p><h2 id="IOU-loss"><a href="#IOU-loss" class="headerlink" title="IOU loss"></a>IOU loss</h2><p>IoU就是我们所说的交并比，是目标检测中最常用的指标，在anchor-based的方法中，他的作用不仅用来确定正样本和负样本，还可以用来评价输出框（predict box）和ground-truth的距离。</p><p>可以说它可以反映预测检测框与真实检测框的检测效果。还有一个很好的特性就是尺度不变性，也就是对尺度不敏感（scale invariant）， 在regression任务中，判断predict box和gt的距离最直接的指标就是IoU。(满足非负性；同一性；对称性；三角不等性)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Iou</span>(<span class="hljs-params">box1, box2, wh=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> wh == <span class="hljs-literal">False</span>:<br>xmin1, ymin1, xmax1, ymax1 = box1<br>xmin2, ymin2, xmax2, ymax2 = box2<br>    <span class="hljs-keyword">else</span>:<br>xmin1, ymin1 = <span class="hljs-built_in">int</span>(box1[<span class="hljs-number">0</span>]-box1[<span class="hljs-number">2</span>]/<span class="hljs-number">2.0</span>), <span class="hljs-built_in">int</span>(box1[<span class="hljs-number">1</span>]-box1[<span class="hljs-number">3</span>]/<span class="hljs-number">2.0</span>)<br>xmax1, ymax1 = <span class="hljs-built_in">int</span>(box1[<span class="hljs-number">0</span>]+box1[<span class="hljs-number">2</span>]/<span class="hljs-number">2.0</span>), <span class="hljs-built_in">int</span>(box1[<span class="hljs-number">1</span>]+box1[<span class="hljs-number">3</span>]/<span class="hljs-number">2.0</span>)<br>xmin2, ymin2 = <span class="hljs-built_in">int</span>(box2[<span class="hljs-number">0</span>]-box2[<span class="hljs-number">2</span>]/<span class="hljs-number">2.0</span>), <span class="hljs-built_in">int</span>(box2[<span class="hljs-number">1</span>]-box2[<span class="hljs-number">3</span>]/<span class="hljs-number">2.0</span>)<br>xmax2, ymax2 = <span class="hljs-built_in">int</span>(box2[<span class="hljs-number">0</span>]+box2[<span class="hljs-number">2</span>]/<span class="hljs-number">2.0</span>), <span class="hljs-built_in">int</span>(box2[<span class="hljs-number">1</span>]+box2[<span class="hljs-number">3</span>]/<span class="hljs-number">2.0</span>)<br>    <span class="hljs-comment"># 获取矩形框交集对应的左上角和右下角的坐标（intersection）</span><br>    xx1 = np.<span class="hljs-built_in">max</span>([xmin1, xmin2])<br>    yy1 = np.<span class="hljs-built_in">max</span>([ymin1, ymin2])<br>    xx2 = np.<span class="hljs-built_in">min</span>([xmax1, xmax2])<br>    yy2 = np.<span class="hljs-built_in">min</span>([ymax1, ymax2])<br>    <span class="hljs-comment"># 计算两个矩形框面积</span><br>    area1 = (xmax1-xmin1) * (ymax1-ymin1) <br>    area2 = (xmax2-xmin2) * (ymax2-ymin2)<br>    inter_area = (np.<span class="hljs-built_in">max</span>([<span class="hljs-number">0</span>, xx2-xx1])) * (np.<span class="hljs-built_in">max</span>([<span class="hljs-number">0</span>, yy2-yy1]))　<span class="hljs-comment">#计算交集面积</span><br>    iou = inter_area / (area1+area2-inter_area+<span class="hljs-number">1e-6</span>) 　<span class="hljs-comment">#计算交并比</span><br><br>    <span class="hljs-keyword">return</span> iou<br><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/348498294">https://zhuanlan.zhihu.com/p/348498294</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/94799295">https://zhuanlan.zhihu.com/p/94799295</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Deep_learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>loss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长回文字符串</title>
    <link href="/2023/10/05/leetcode/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E4%B8%B2/"/>
    <url>/2023/10/05/leetcode/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestPalindrome</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">boolean</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n][n];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; n; ++l) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i + l &lt; n; ++i) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + l;<br>                <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span>) &#123;<br>                    dp[i][j] = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l == <span class="hljs-number">1</span>) &#123;<br>                    dp[i][j] = (s.charAt(i) == s.charAt(j));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[i][j] = (s.charAt(i) == s.charAt(j) &amp;&amp; dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (dp[i][j] &amp;&amp; l + <span class="hljs-number">1</span> &gt; ans.length()) &#123;<br>                    ans = s.substring(i, i + l + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br><br><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dp系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长公共子序列</title>
    <link href="/2023/10/05/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2023/10/05/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>给定两个字符串text1和text2，返回这两个字符串的最长公共序列的长度。如果不存在公共子序列,返回 0。<br>一个字符串的子序列是指这样一个新的字符串:它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p><p>示例 1：<br>输入：text1 &#x3D; “abcde”, text2 &#x3D; “ace”<br>输出：3<br>解释：最长公共子序列是 “ace” ，它的长度为 3 。<br>示例 2：<br>输入：text1 &#x3D; “abc”, text2 &#x3D; “abc”<br>输出：3<br>解释：最长公共子序列是 “abc” ，它的长度为 3 。<br>示例 3：<br>输入：text1 &#x3D; “abc”, text2 &#x3D; “def”<br>输出：0<br>解释：两个字符串没有公共子序列，返回 0 。</p><p>** 状态转移方程 **<br>dp[i][j]&#x3D;dp[i-1][j-1]+1  A[i]&#x3D;&#x3D;B[j]<br>dp[i][j]&#x3D;max{dp[i-1][j],dp[i][j-1]}  A[i]!&#x3D;B[j] </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestCommonSubsequence</span><span class="hljs-params">(String text1, String text2)</span> &#123;<br>        <span class="hljs-type">int</span> m=text1.length();<br>        <span class="hljs-type">int</span> n=text2.length();<br>        <span class="hljs-type">char</span>[] s1=text1.toCharArray();<br>        <span class="hljs-type">char</span>[] s2=text2.toCharArray();<br>        <span class="hljs-type">int</span>[][] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=m;i++)&#123;<br>            dp[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123;<br>            dp[<span class="hljs-number">0</span>][j]=<span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(s1[i-<span class="hljs-number">1</span>]==s2[j-<span class="hljs-number">1</span>])&#123;<br>                    dp[i][j]=dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    dp[i][j]=Math.max(dp[i-<span class="hljs-number">1</span>][j],dp[i][j-<span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dp系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串排列与变式</title>
    <link href="/2023/10/05/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/10/05/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串的排列-剑指offer38"><a href="#字符串的排列-剑指offer38" class="headerlink" title="字符串的排列 剑指offer38"></a>字符串的排列 剑指offer38</h2><p>输入一个字符串，打印出该字符串中字符的所有排列。<br>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p><p>示例:<br>输入：s &#x3D; “abc”<br>输出：[“abc”,”acb”,”bac”,”bca”,”cab”,”cba”]<br>链接：<a href="https://leetcode-cn.com/problems/">https://leetcode-cn.com/problems/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-type">char</span>[] c;<br>    <span class="hljs-keyword">public</span> String[] permutation(String s) &#123;<br>        c = s.toCharArray();<br>        dfs(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[res.size()]);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span>(x == c.length - <span class="hljs-number">1</span>) &#123;<br>            res.add(String.valueOf(c));      <br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        HashSet&lt;Character&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x; i &lt; c.length; i++) &#123;<br>           <span class="hljs-keyword">if</span>(!set.contains(c[i]))&#123;<br>                set.add(c[i]);<br>                swap(i, x);                      <span class="hljs-comment">// 交换，将 c[i] 固定在第 x 位</span><br>                dfs(x + <span class="hljs-number">1</span>);                      <span class="hljs-comment">// 开启固定第 x + 1 位字符</span><br>                swap(i, x); <br>            &#125;                     <span class="hljs-comment">// 恢复交换</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> c[a];<br>        c[a] = c[b];<br>        c[b] = tmp;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="字符串所有子序列"><a href="#字符串所有子序列" class="headerlink" title="字符串所有子序列"></a>字符串所有子序列</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[]args)</span></span>&#123;<br>        Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> str=in.<span class="hljs-built_in">nextLine</span>();<br>        <span class="hljs-built_in">dfs</span>(str.<span class="hljs-built_in">toCharArray</span>(),<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span>[] arr,<span class="hljs-type">int</span> i,<span class="hljs-type">String</span> res)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(i==arr.length)&#123;<br>            System.out.<span class="hljs-built_in">println</span>(res);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">dfs</span>(arr,i+<span class="hljs-number">1</span>,res);   <span class="hljs-comment">//不选</span><br>            <span class="hljs-built_in">dfs</span>(arr,i+<span class="hljs-number">1</span>,res+arr[i]);  <span class="hljs-comment">//选</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归与回溯</title>
    <link href="/2023/10/05/leetcode/%E9%80%92%E5%BD%92/"/>
    <url>/2023/10/05/leetcode/%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> max=<span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span>[] p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max];<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">generate</span><span class="hljs-params">(<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> n,<span class="hljs-type">boolean</span>[] table)</span>&#123;<br>        <span class="hljs-keyword">if</span>(index== n+<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>                System.out.print(p[i]);<br>            &#125;<br>            System.out.println();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;x&lt;=n;x++)&#123;<br>            <span class="hljs-keyword">if</span>(table[x]==<span class="hljs-literal">false</span>)&#123;<br>                p[index]=x;<br>                table[x]=<span class="hljs-literal">true</span>;<br>                generate(index+<span class="hljs-number">1</span>,n,table);<br>                table[x]=<span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span>[] table=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[max];<br>        Arrays.fill(table,<span class="hljs-literal">false</span>);<br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> n=sc.nextInt();<br>        Main all=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br>        all.generate(<span class="hljs-number">1</span>,n,table);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h1>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快排改进</title>
    <link href="/2023/10/05/leetcode/%E5%BF%AB%E6%8E%92%E7%9A%84%E6%94%B9%E8%BF%9B/"/>
    <url>/2023/10/05/leetcode/%E5%BF%AB%E6%8E%92%E7%9A%84%E6%94%B9%E8%BF%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="三路快排-存在大量重复元素"><a href="#三路快排-存在大量重复元素" class="headerlink" title="三路快排 存在大量重复元素"></a>三路快排 存在大量重复元素</h1><p>例题：<br>LeetCode75 颜色分类<br>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。<br>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。<br>示例 1：<br>输入：nums &#x3D; [2,0,2,1,1,0]<br>输出：[0,0,1,1,2,2]<br>示例 2：<br>输入：nums &#x3D; [2,0,1]<br>输出：[0,1,2]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortColors</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> len=nums.length;<br>        <span class="hljs-keyword">if</span>(len&lt;<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> zero=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> two=len;<br>        <span class="hljs-keyword">while</span>(i&lt;two)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">0</span>)&#123;<br>                swap(nums,i,zero);<br>                i++;<br>                zero++;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">1</span>)&#123;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                two--;<br>                swap(nums,i,two);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums,<span class="hljs-type">int</span> index1,<span class="hljs-type">int</span> index2)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[index1];<br>        nums[index1] = nums[index2];<br>        nums[index2] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="小数组用插入排序"><a href="#小数组用插入排序" class="headerlink" title="小数组用插入排序"></a>小数组用插入排序</h1>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撕代码</title>
    <link href="/2023/10/05/leetcode/%E5%B8%B8%E8%A7%81%E6%89%8B%E6%92%95%E7%AE%97%E6%B3%95/"/>
    <url>/2023/10/05/leetcode/%E5%B8%B8%E8%A7%81%E6%89%8B%E6%92%95%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Main &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr=&#123;<span class="hljs-number">16</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">20</span>, <span class="hljs-number">17</span>, <span class="hljs-number">8</span>&#125;;<br>        quick<span class="hljs-constructor">Sort(<span class="hljs-params">arr</span>)</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> num:arr)&#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print(num+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    public static void quick<span class="hljs-constructor">Sort(<span class="hljs-params">int</span>[] <span class="hljs-params">a</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(a.length&gt;<span class="hljs-number">0</span>) &#123;<br>            quick<span class="hljs-constructor">Sort(<span class="hljs-params">a</span>, 0 , <span class="hljs-params">a</span>.<span class="hljs-params">length</span>-1)</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> static void quick<span class="hljs-constructor">Sort(<span class="hljs-params">int</span>[] <span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-params">low</span>, <span class="hljs-params">int</span> <span class="hljs-params">high</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>( low &gt; high) &#123;<br>            return;<br>        &#125;<br>        <span class="hljs-built_in">int</span> i = low;<br>        <span class="hljs-built_in">int</span> j = high;<br>        <span class="hljs-built_in">int</span> key = a<span class="hljs-literal">[ <span class="hljs-identifier">low</span> ]</span>;<br><br>        <span class="hljs-keyword">while</span>( i&lt; j) &#123;<br>            <span class="hljs-keyword">while</span>(i&lt;j<span class="hljs-operator"> &amp;&amp; </span>a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> &gt; key)&#123;<br>                j--;<br>            &#125;<br>            <span class="hljs-keyword">while</span>( i&lt;j<span class="hljs-operator"> &amp;&amp; </span>a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> &lt;= key) &#123;<br>                i++;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(i&lt;j) &#123;<br>                <span class="hljs-built_in">int</span> p = a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>                a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>                a<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> = p;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">int</span> p = a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>        a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = a<span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span>;<br>        a<span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span> = p;<br><br>        quick<span class="hljs-constructor">Sort(<span class="hljs-params">a</span>, <span class="hljs-params">low</span>, <span class="hljs-params">i</span>-1 )</span>;<br>        quick<span class="hljs-constructor">Sort(<span class="hljs-params">a</span>, <span class="hljs-params">i</span>+1, <span class="hljs-params">high</span>)</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> merge(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span> l1,<span class="hljs-type">int</span> r1,<span class="hljs-type">int</span> l2,<span class="hljs-type">int</span> r2) &#123;//将两个有序序列合并<br>    <span class="hljs-type">int</span> i=l1;<span class="hljs-type">int</span> j=l2;<br>    <span class="hljs-type">int</span>[] tmp=<span class="hljs-built_in">new</span>  <span class="hljs-type">int</span>[Max];<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i&lt;=r1&amp;&amp;j&lt;=r2)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]&lt;a[j])&#123;<br>            tmp[<span class="hljs-keyword">index</span>++]=a[i++];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            tmp[<span class="hljs-keyword">index</span>++]=a[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=r1)<br>        tmp[<span class="hljs-keyword">index</span>++]=a[i++];<br>    <span class="hljs-keyword">while</span> (j&lt;=r2)<br>        tmp[<span class="hljs-keyword">index</span>++]=a[j++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-keyword">index</span>;k++)&#123;<br>        a[l1+k]=tmp[k];<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">public</span> static  <span class="hljs-type">void</span> sort(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)&#123;//<span class="hljs-number">2</span>路归并<br>    <span class="hljs-keyword">if</span>(left&lt;right)&#123;<br>        <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>        sort(a,left,mid);<br>        sort(a,mid+<span class="hljs-number">1</span>,right);<br>        merge(a,left,mid,mid+<span class="hljs-number">1</span>,right);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="推排序"><a href="#推排序" class="headerlink" title="推排序"></a>推排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">16</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">20</span>, <span class="hljs-number">17</span>, <span class="hljs-number">8</span>&#125;;<br>        heapSort(arr);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:arr)&#123;<br>            System.out.print(num+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        createheap(arr);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=arr.length-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>            <span class="hljs-type">int</span> temp=arr[<span class="hljs-number">0</span>];<br>            arr[<span class="hljs-number">0</span>]=arr[j];<br>            arr[j]=temp;<br>            adjustHeap(arr,j,<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createheap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=arr.length/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            adjustHeap(arr,arr.length,i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjustHeap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> len,<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-type">int</span> lchild=i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> k=i;<br>        <span class="hljs-type">int</span> temp=arr[i];<br>        <span class="hljs-keyword">while</span>(lchild&lt;len)&#123;<br>            <span class="hljs-keyword">if</span>(lchild+<span class="hljs-number">1</span>&lt;len)&#123;<br>                <span class="hljs-keyword">if</span>(arr[lchild]&lt;arr[lchild+<span class="hljs-number">1</span>])&#123;<br>                    lchild=lchild+<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(arr[lchild]&gt;temp)&#123;<br>                arr[k]=arr[lchild];<br>                k=lchild;<br>                lchild=<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        arr[k]=temp;<br><br>    &#125;<br>    <br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br></code></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a)</span>&#123;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>           <span class="hljs-type">int</span> k=i;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;a.length;j++)&#123;<br>               <span class="hljs-keyword">if</span>(a[j]&lt;a[k])&#123;<br>                   k=j;<br>               &#125;<br>           &#125;<br>           <span class="hljs-type">int</span> tmp=a[i];<br>           a[i]=a[k];<br>           a[k]=tmp;<br><br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="倒置"><a href="#倒置" class="headerlink" title="倒置"></a>倒置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    ListNode head=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>&#123;  <span class="hljs-comment">//定义结构体</span><br>        <span class="hljs-type">int</span> value;<br>        ListNode next;<br>        ListNode(<span class="hljs-type">int</span> x)&#123;<br>            value=x;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*添加元素*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        ListNode currnode=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(i);<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>)&#123;<br>            head=currnode;<br>            <span class="hljs-keyword">return</span>;    <span class="hljs-comment">//重点注意，不可省略，否则变为自身连接</span><br><br>        &#125;<br>        ListNode pNode=head;<br>        <span class="hljs-keyword">while</span>(pNode.next!=<span class="hljs-literal">null</span>)&#123;<br>            pNode=pNode.next;<br>        &#125;<br>        pNode.next=currnode;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*打印元素*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">()</span>&#123;<br>        ListNode pnode=head;<br>        <span class="hljs-keyword">while</span> (pnode!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.print(pnode.value+<span class="hljs-string">&quot; &quot;</span>);<br>            pnode=pnode.next;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*倒置链表*/</span><br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">()</span> &#123;<br>        ListNode pHead=<span class="hljs-literal">null</span>;<br>        ListNode pRre=<span class="hljs-literal">null</span>;<br>        ListNode pNode=head;<br><br>        <span class="hljs-keyword">while</span>(pNode!=<span class="hljs-literal">null</span>)&#123;<br>            ListNode pNext=pNode.next;<br><br>            <span class="hljs-keyword">if</span>(pNext==<span class="hljs-literal">null</span>)&#123;<br>                pHead=pNode;<br>            &#125;<br><br>            pNode.next=pRre;<br>            pRre=pNode;<br>            pNode=pNext;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> pHead;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Main</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br>       <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-keyword">while</span>(!sc.hasNext(<span class="hljs-string">&quot;#&quot;</span>))&#123;<br>         list.addNode(Integer.valueOf(sc.next()));<br>        &#125;<br><br>        list.head=list.reverseList();<br>        list.Print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="找出链表相同元素"><a href="#找出链表相同元素" class="headerlink" title="找出链表相同元素"></a>找出链表相同元素</h2><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="还原树"><a href="#还原树" class="headerlink" title="还原树"></a>还原树</h2><h2 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h2>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查找</title>
    <link href="/2023/10/05/leetcode/%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/10/05/leetcode/%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="搜素旋转排序数组"><a href="#搜素旋转排序数组" class="headerlink" title="搜素旋转排序数组"></a>搜素旋转排序数组</h1><p>已知存在一个按非降序排列的整数数组 nums ，数组中的值不必互不相同。<br>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了旋转<br>使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）例如:[0,1,2,4,4,4,5,6,6,7] 在下标 5 处经旋转后可能变为 [4,5,6,6,7,0,1,2,4,4]<br>给你旋转后的数组 nums 和一个整数 target,请你编写一个函数来判断给定的目标值是否存在于数组中。如果 nums 中存在这个目标值 target ，则返回 true ，否则返回 false 。<br>示例 1：<br>输入：nums &#x3D; [2,5,6,0,0,1,2], target &#x3D; 0<br>输出：true<br>示例 2：<br>输入：nums &#x3D; [2,5,6,0,0,1,2], target &#x3D; 3<br>输出：false</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p><p><strong>思路：二分查找</strong></p><ol><li>当前中点&lt;最右端值，说明右端排序好<br>2）当前中点&gt;最右端值，说明左端排序好<br><em>注意：若中点&#x3D;&#x3D;左端值，不能确定左区间值全部相同，左端点右移一位</em></li></ol><pre><code class="java">class Solution &#123;    public boolean search(int[] nums, int target) &#123;       int start=0,end=nums.length-1;       while(start&lt;=end)&#123;           int mid=(start+end)/2;           if(nums[mid]==target)&#123;               return true;           &#125;           if(nums[mid]==nums[start])&#123;               start++;           &#125;else if(nums[mid]&lt;=nums[end])&#123;               if(target&gt;nums[mid]&amp;&amp;target&lt;=nums[end])&#123;                   start=mid+1;               &#125;else&#123;                   end=mid-1;               &#125;           &#125;else&#123;               if(target&gt;=nums[start]&amp;&amp;target&lt;nums[mid])&#123;                   end=mid-1;               &#125;else&#123;                   start=mid+1;               &#125;           &#125;       &#125;        return false;    &#125;&#125;`</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图的实现与遍历</title>
    <link href="/2023/10/05/leetcode/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2023/10/05/leetcode/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="图的实现方式："><a href="#图的实现方式：" class="headerlink" title="图的实现方式："></a>图的实现方式：</h1><h1 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历:"></a>图的遍历:</h1><h2 id="DFS模板"><a href="#DFS模板" class="headerlink" title="DFS模板"></a>DFS模板</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//遍历一个连通分量</span><br><span class="hljs-constructor">DFS(<span class="hljs-params">u</span>)</span>&#123;G<br>    vist<span class="hljs-literal">[<span class="hljs-identifier">u</span>]</span>=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(从u出发所能到达的所有顶点v)<br>    <span class="hljs-keyword">if</span> vist<span class="hljs-literal">[<span class="hljs-identifier">v</span>]</span>==<span class="hljs-literal">false</span><br>    <span class="hljs-constructor">DFS(<span class="hljs-params">v</span>)</span>;<br>&#125;<br><span class="hljs-comment">//遍历图</span><br><span class="hljs-constructor">DFSTrave(G)</span>&#123;<br>    <span class="hljs-keyword">for</span>(G所有顶点u)<br>    <span class="hljs-keyword">if</span> vist<span class="hljs-literal">[<span class="hljs-identifier">u</span>]</span>==<span class="hljs-literal">false</span><br>    <span class="hljs-constructor">DFS(<span class="hljs-params">u</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例题：PAT 1034 Head of a Gang (30 分)</strong><br>One way that the police finds the head of a gang is to check people’s phone calls. If there is a phone call between A and B, we say that A and B is related. The weight of a relation is defined to be the total time length of all the phone calls made between the two persons. A “Gang” is a cluster of more than 2 persons who are related to each other with total relation weight being greater than a given threshold K. In each gang, the one with maximum total weight is the head. Now given a list of phone calls, you are supposed to find the gangs and the heads.<br>Input Specification:<br>Each input file contains one test case. For each case, the first line contains two positive numbers N and K (both less than or equal to 1000), the number of phone calls and the weight threthold, respectively. Then N lines follow, each in the following format:<br>Name1 Name2 Time<br>where Name1 and Name2 are the names of people at the two ends of the call, and Time is the length of the call. A name is a string of three capital letters chosen from A-Z. A time length is a positive integer which is no more than 1000 minutes.<br>Output Specification:<br>For each test case, first print in a line the total number of gangs. Then for each gang, print in a line the name of the head and the total number of the members. It is guaranteed that the head is unique for each gang. The output must be sorted according to the alphabetical order of the names of the heads.</p><p>Sample Input 1:<br>8 59<br>AAA BBB 10<br>BBB AAA 20<br>AAA CCC 40<br>DDD EEE 5<br>EEE DDD 70<br>FFF GGG 30<br>GGG HHH 20<br>HHH FFF 10</p><p>Sample Output 1:<br>2<br>AAA 3<br>GGG 3</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">1000000000</span>;<br><br>map&lt;<span class="hljs-type">int</span>, string&gt; intToString; <span class="hljs-comment">//编号-&gt;姓名</span><br>map&lt;string, <span class="hljs-type">int</span>&gt; stringToint; <span class="hljs-comment">// 姓名-&gt;编号</span><br>map&lt;string, <span class="hljs-type">int</span>&gt; Gang;<br><span class="hljs-type">int</span> G[maxn][maxn] = &#123; <span class="hljs-number">0</span> &#125;, weight[maxn] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> n, k, numPerson = <span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> vis[maxn] = &#123; <span class="hljs-literal">false</span> &#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> nowVisit, <span class="hljs-type">int</span>&amp; head, <span class="hljs-type">int</span>&amp; numMember, <span class="hljs-type">int</span>&amp; totalValue)</span> </span>&#123;<br>numMember++;<br>vis[nowVisit] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (weight[nowVisit] &gt; weight[head]) &#123;<br>head = nowVisit;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numPerson; i++) &#123;<br><span class="hljs-keyword">if</span> (G[nowVisit][i] &gt; <span class="hljs-number">0</span>) &#123;<br>totalValue += G[nowVisit][i];<br>G[nowVisit][i] = G[i][nowVisit] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (vis[i] == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-built_in">DFS</span>(i, head, numMember, totalValue);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTrave</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numPerson; i++) &#123;<br><span class="hljs-keyword">if</span> (vis[i] == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-type">int</span> head = i, numMember = <span class="hljs-number">0</span>, totalValue = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">DFS</span>(i, head, numMember, totalValue);<br><span class="hljs-keyword">if</span> (numMember &gt; <span class="hljs-number">2</span> &amp;&amp; totalValue &gt; k) &#123;<br>Gang[intToString[head]] = numMember;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//将有向图变为无向图,并将顶点总边权保存下来</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(string str)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (stringToint.<span class="hljs-built_in">find</span>(str) != stringToint.<span class="hljs-built_in">end</span>()) &#123;<br><span class="hljs-keyword">return</span> stringToint[str];<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>stringToint[str] = numPerson;<br>intToString[numPerson] = str;<br><span class="hljs-keyword">return</span> numPerson++;<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> w;<br>string str1, str2;<br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; str1 &gt;&gt; str2 &gt;&gt; w;<br><span class="hljs-type">int</span> id1 = <span class="hljs-built_in">change</span>(str1);<br><span class="hljs-type">int</span> id2 = <span class="hljs-built_in">change</span>(str2);<br>weight[id1] += w;<br>weight[id2] += w;<br>G[id1][id2] += w;<br>G[id2][id1] += w;<br>&#125;<br><span class="hljs-built_in">DFSTrave</span>();<br>cout &lt;&lt; Gang.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>map&lt;string, <span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span> (it = Gang.<span class="hljs-built_in">begin</span>(); it != Gang.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span>&lt;&lt; it-&gt;second &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树与图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的实现</title>
    <link href="/2023/10/05/leetcode/%E9%93%BE%E8%A1%A8_%E6%A0%91_%E5%9B%BE/"/>
    <url>/2023/10/05/leetcode/%E9%93%BE%E8%A1%A8_%E6%A0%91_%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>        <span class="hljs-type">int</span> val;<br>        TreeNode left;<br>        TreeNode right;<br><br><br>        TreeNode(<span class="hljs-type">int</span> val)&#123;<br>            <span class="hljs-built_in">this</span>.val=val;<br>        &#125;<br><br>        TreeNode(<span class="hljs-type">int</span> val,TreeNode left,TreeNode right)&#123;<br>            <span class="hljs-built_in">this</span>.val=val;<br>            <span class="hljs-built_in">this</span>.left=left;<br>            <span class="hljs-built_in">this</span>.right=right;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TreeNode <span class="hljs-title function_">constructTree</span><span class="hljs-params">(Integer[] nums)</span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">0</span>);<br>        Deque&lt;TreeNode&gt; nodeQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 创建一个根节点</span><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[<span class="hljs-number">0</span>]);<br>        nodeQueue.offer(root);<br>        TreeNode cur;<br>        <span class="hljs-comment">// 记录当前行节点的数量（注意不一定是2的幂，而是上一行中非空节点的数量乘2）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lineNodeNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 记录当前行中数字在数组中的开始位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 记录数组中剩余的元素的数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">restLength</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span>(restLength &gt; <span class="hljs-number">0</span>) &#123;<br>           <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt; startIndex + lineNodeNum; i = i + <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-comment">// 说明已经将nums中的数字用完，此时应停止遍历，并可以直接返回root</span><br>                <span class="hljs-keyword">if</span> (i == nums.length) <span class="hljs-keyword">return</span> root;<br>                cur = nodeQueue.poll();<br>                <span class="hljs-keyword">if</span> (nums[i] != <span class="hljs-literal">null</span>) &#123;<br>                    cur.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[i]);<br>                    nodeQueue.offer(cur.left);<br>                &#125;<br>                <span class="hljs-comment">// 同上，说明已经将nums中的数字用完，此时应停止遍历，并可以直接返回root</span><br>                <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> == nums.length) <span class="hljs-keyword">return</span> root;<br>                <span class="hljs-keyword">if</span> (nums[i + <span class="hljs-number">1</span>] != <span class="hljs-literal">null</span>) &#123;<br>                    cur.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(nums[i + <span class="hljs-number">1</span>]);<br>                    nodeQueue.offer(cur.right);<br>                &#125;<br>            &#125;<br>            startIndex += lineNodeNum;<br>            restLength -= lineNodeNum;<br>            lineNodeNum = nodeQueue.size() * <span class="hljs-number">2</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        System.out.print(root.val + <span class="hljs-string">&quot; &quot;</span>);<br>        preOrder(root.left);<br>        preOrder(root.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] levelOrder(TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        Queue&lt;TreeNode&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        ArrayList&lt;Integer&gt; sum=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        a.add(root);<br>        <span class="hljs-keyword">while</span>(!a.isEmpty())&#123;<br>            TreeNode t=a.poll();<br>            sum.add(t.val);<br>            <span class="hljs-keyword">if</span>(t.left!=<span class="hljs-literal">null</span>) a.add(t.left);<br>            <span class="hljs-keyword">if</span>(t.right!=<span class="hljs-literal">null</span>) a.add(t.right);<br>        &#125;<br><br>        <span class="hljs-type">int</span>[] p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum.size()];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sum.size();i++)&#123;<br>            p[i]=sum.get(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Integer[] nums = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> constructTree(nums);<br>       <span class="hljs-comment">// System.out.println(root);</span><br><br>       Main t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br>        <span class="hljs-comment">//t.preOrder(root);</span><br>        <span class="hljs-type">int</span>[] s=t.levelOrder(root);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length;i++)&#123;<br>            System.out.print(s[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树与图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树遍历</title>
    <link href="/2023/10/05/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <url>/2023/10/05/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span>&#123;<br>    ElemType data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span> *lchild,*rchild;<br>&#125;BiTNode,*BiTree;<br></code></pre></td></tr></table></figure><h1 id="二叉树的高度"><a href="#二叉树的高度" class="headerlink" title="二叉树的高度"></a>二叉树的高度</h1><h2 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">btheigh</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> h1,h2;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>    h1=<span class="hljs-built_in">btheigh</span>(T-&gt;lchild);<br>h2=<span class="hljs-built_in">btheigh</span>(T-&gt;rchild);<br><span class="hljs-keyword">if</span>(h1&gt;h2)<br><span class="hljs-keyword">return</span> h1+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> h2+<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//简洁版：</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">btheigh</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">btheigh</span>(T-&gt;lchild),<span class="hljs-built_in">btheigh</span>(T-&gt;rchild))+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归:"></a>非递归:</h2><h3 id="BFS-层次遍历，队列）"><a href="#BFS-层次遍历，队列）" class="headerlink" title="BFS(层次遍历，队列）"></a>BFS(层次遍历，队列）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">btheigh</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> front=<span class="hljs-number">-1</span>,rear=<span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> last=<span class="hljs-number">0</span>,level=<span class="hljs-number">0</span>;<br>BiTree Q[MaxSize];<br>BiTree p;<br>Q[++rear]=T;<br><span class="hljs-keyword">while</span>(front&lt;rear)<br>&#123;<br>    p=Q[++front];<br><span class="hljs-keyword">if</span>(p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>    Q[++rear]=p-&gt;lchild;<br>    <span class="hljs-keyword">if</span>(p-&gt;rchild!=<span class="hljs-literal">NULL</span>)<br>    Q[++rear]=p-&gt;rchild;<br><span class="hljs-keyword">if</span>(front==last)<br>&#123;<br>    level++;<br>last=rear;<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">return</span> level;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DFS-前中后序遍历的非递归方法，栈"><a href="#DFS-前中后序遍历的非递归方法，栈" class="headerlink" title="DFS(前中后序遍历的非递归方法，栈)"></a>DFS(前中后序遍历的非递归方法，栈)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">btheigh</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-built_in">InitStack</span>(S);<br><span class="hljs-built_in">InitStack</span>(level);<br><span class="hljs-type">int</span> h=<span class="hljs-number">0</span>;<br>BiTree p=T;<br><span class="hljs-built_in">Push</span>(S,T);<br><span class="hljs-built_in">Push</span>(level,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">IsEmpty</span>(S))<br>&#123;<br>p=<span class="hljs-built_in">Pop</span>(S);<br><span class="hljs-type">int</span> tmp=<span class="hljs-built_in">Pop</span>(level);<br>h=<span class="hljs-built_in">max</span>(tmp,h);<br><span class="hljs-keyword">if</span>(p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>    <span class="hljs-built_in">Push</span>(S,p-&gt;lchild);<br>    <span class="hljs-built_in">Push</span>(level,temp+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(p-&gt;rchild!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>    <span class="hljs-built_in">Push</span>(S,p-&gt;rchild);<br>    <span class="hljs-built_in">Push</span>(level,temp+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树与图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2023/10/05/leetcode/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2023/10/05/leetcode/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>#并查集定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Scanner in = new Scanner(System.in);</span><br>        <span class="hljs-type">int</span>[][] isConnected=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br>        Solution a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        System.out.println(a.findCircleNum(isConnected));<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findCircleNum</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] isConnected)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> isConnected.length;<br>        <span class="hljs-comment">// 初始化并查集</span><br>        <span class="hljs-type">UnionFind</span> <span class="hljs-variable">uf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnionFind</span>(n);<br>        <span class="hljs-comment">// 遍历每个顶点，将当前顶点与其邻接点进行合并</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (isConnected[i][j] == <span class="hljs-number">1</span>) &#123;<br>                    uf.union(i, j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 返回最终合并后的集合的数量</span><br>        <span class="hljs-keyword">return</span> uf.size;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 并查集</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span> &#123;<br>    <span class="hljs-type">int</span>[] roots;<br>    <span class="hljs-type">int</span> size; <span class="hljs-comment">// 集合数量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        roots = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            roots[i] = i;<br>        &#125;<br>        size = n;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i == roots[i]) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> roots[i] = find(roots[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pRoot</span> <span class="hljs-operator">=</span> find(p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qRoot</span> <span class="hljs-operator">=</span> find(q);<br>        <span class="hljs-keyword">if</span> (pRoot != qRoot) &#123;<br>            roots[pRoot] = qRoot;<br>            size--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>#例题：</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树与图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快排应用</title>
    <link href="/2023/10/05/leetcode/%E5%BF%AB%E6%8E%92%E5%BA%94%E7%94%A8/"/>
    <url>/2023/10/05/leetcode/%E5%BF%AB%E6%8E%92%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指Offer45：把数组排成最小的数"><a href="#剑指Offer45：把数组排成最小的数" class="headerlink" title="剑指Offer45：把数组排成最小的数"></a>剑指Offer45：把数组排成最小的数</h1><p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p><p>示例 1:<br>输入: [10,2]<br>输出: “102”</p><p>示例 2:<br>输入: [3,30,34,5,9]<br>输出: “3033459”</p><p>*核心思想：<br>如果字符串拼接 x+y&gt;y+x 则认为x”大于”y<br>反之           x+y&lt;y+x 则认为y”大于”x<br>对大小重新进行定义，从而排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">minNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       String[] strs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[nums.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)<br>            strs[i] = String.valueOf(nums[i]);<br>        quicksort(strs, <span class="hljs-number">0</span>, strs.length - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(String s : strs)<br>            res.append(s);<br>        <span class="hljs-keyword">return</span> res.toString();  <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quicksort</span><span class="hljs-params">(String[] arr,<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> right)</span>&#123;<br>        <span class="hljs-keyword">if</span>(low&gt;=right) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> i=low;<br>        <span class="hljs-type">int</span> j=right;<br>        String temp=arr[i];<br>        <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>            <span class="hljs-keyword">while</span>(i&lt;j&amp;&amp;(arr[j]+arr[low]).compareTo(arr[low]+arr[j])&gt;=<span class="hljs-number">0</span>) j--;<br>            <span class="hljs-keyword">while</span>(i&lt;j&amp;&amp;(arr[i]+arr[low]).compareTo(arr[low]+arr[i])&lt;=<span class="hljs-number">0</span>) i++;<br>            temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;<br>        arr[i]=arr[low];<br>        arr[low]=temp;<br>        quicksort(arr,low,i-<span class="hljs-number">1</span>);<br>        quicksort(arr,i+<span class="hljs-number">1</span>,right);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer部分题解</title>
    <link href="/2023/10/05/leetcode/%E5%89%91%E6%8C%87offer/"/>
    <url>/2023/10/05/leetcode/%E5%89%91%E6%8C%87offer/</url>
    
    <content type="html"><![CDATA[<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="剑指Offer13-机器人的运动范围"><a href="#剑指Offer13-机器人的运动范围" class="headerlink" title="剑指Offer13 机器人的运动范围"></a>剑指Offer13 机器人的运动范围</h3><p>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7&#x3D;18。但它不能进入方格 [35, 38]，因为3+5+3+8&#x3D;19。请问该机器人能够到达多少个格子？<br>示例 1：<br>输入：m &#x3D; 2, n &#x3D; 3, k &#x3D; 1<br>输出：3</p><p>示例 2：<br>输入：m &#x3D; 3, n &#x3D; 1, k &#x3D; 0<br>输出：1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">movingCount</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">boolean</span>[][] visit=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[m][n];<br>        <span class="hljs-keyword">return</span> DFS(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,m,n,k,visit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k,<span class="hljs-type">boolean</span> visit[][])</span>&#123;<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>||j&lt;<span class="hljs-number">0</span>||i&gt;=m||j&gt;=n||number(i)+number(j)&gt;k||visit[i][j])&#123;   <span class="hljs-comment">//出口</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        visit[i][j]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> DFS(i-<span class="hljs-number">1</span>,j,m,n,k,visit)+DFS(i+<span class="hljs-number">1</span>,j,m,n,k,visit)+DFS(i,j-<span class="hljs-number">1</span>,m,n,k,visit)    <br>               +DFS(i,j+<span class="hljs-number">1</span>,m,n,k,visit)+<span class="hljs-number">1</span>;                                           <span class="hljs-comment">//选择</span><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">number</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span>&#123;  <span class="hljs-comment">//判断函数</span><br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(m&gt;<span class="hljs-number">0</span>)&#123;<br>            sum+=m%<span class="hljs-number">10</span>;<br>            m/=<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="剑指Offer48：-最长不含重复字符的子字符串"><a href="#剑指Offer48：-最长不含重复字符的子字符串" class="headerlink" title="剑指Offer48： 最长不含重复字符的子字符串"></a>剑指Offer48： 最长不含重复字符的子字符串</h3><p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。<br>示例 1:<br>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:<br>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:<br>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>    请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><p>** 转移方程 **<br>dp[i]     dp[i-1]+1,   dp[i-1]&lt;i-j<br>          i-j,         dp[i-1]&gt;&#x3D;i-j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>         Map&lt;Character, Integer&gt; dic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; s.length(); j++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dic.getOrDefault(s.charAt(j), -<span class="hljs-number">1</span>); <span class="hljs-comment">// 获取索引 i</span><br>            dic.put(s.charAt(j), j); <span class="hljs-comment">// 更新哈希表</span><br>            tmp = tmp &lt; j - i ? tmp + <span class="hljs-number">1</span> : j - i; <span class="hljs-comment">// dp[j - 1] -&gt; dp[j]</span><br>            res = Math.max(res, tmp); <span class="hljs-comment">// max(dp[j - 1], dp[j])</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="剑指Offer46：把数字翻译成字符串"><a href="#剑指Offer46：把数字翻译成字符串" class="headerlink" title="剑指Offer46：把数字翻译成字符串"></a>剑指Offer46：把数字翻译成字符串</h3><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。<br>示例 1:<br>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p><p>** 转移方程 **<br>dp[i]&#x3D; dp[i-2]+dp[i-1] ,   10&lt;&#x3D;10*x[i-1]+x[i]&lt;&#x3D;25<br>       dp[i-1]         ,   10*x[i-1]+x[i]&lt;10 || 10*x[i-1]+x[i] &gt;25</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Solution &#123;<br>    public <span class="hljs-built_in">int</span> translate<span class="hljs-constructor">Num(<span class="hljs-params">int</span> <span class="hljs-params">num</span>)</span> &#123;<br>        String s=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">num</span>)</span>;<br>        <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> dp=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-identifier">s</span>.<span class="hljs-identifier">length</span>()+<span class="hljs-number">1</span>]</span>;<br>        dp<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>=<span class="hljs-number">1</span>;<br>        dp<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">2</span>;i&lt;=s.length<span class="hljs-literal">()</span>;i++)&#123;<br>            String sum=s.substring(i-<span class="hljs-number">2</span>,i);<br>            <span class="hljs-keyword">if</span>(sum.compare<span class="hljs-constructor">To(<span class="hljs-string">&quot;10&quot;</span>)</span> &gt;= <span class="hljs-number">0</span><span class="hljs-operator"> &amp;&amp; </span>sum.compare<span class="hljs-constructor">To(<span class="hljs-string">&quot;25&quot;</span>)</span> &lt;= <span class="hljs-number">0</span>)&#123;<br>                dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>=dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>-<span class="hljs-number">1</span>]</span>+dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>-<span class="hljs-number">2</span>]</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>=dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>-<span class="hljs-number">1</span>]</span>;<br>            &#125;<br>        &#125;<br>        return dp<span class="hljs-literal">[<span class="hljs-identifier">s</span>.<span class="hljs-identifier">length</span>()]</span>;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="剑指Offer53：在排序数组中查找数字"><a href="#剑指Offer53：在排序数组中查找数字" class="headerlink" title="剑指Offer53：在排序数组中查找数字"></a>剑指Offer53：在排序数组中查找数字</h3><p>统计一个数字在排序数组中出现的次数。<br>示例:<br>输入: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8<br>输出: 2<br>输入: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6<br>输出: 0</p><p>** 方法：两次二分查找 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> number=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(nums.length&gt;<span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//临界条件</span><br>        <span class="hljs-type">int</span> low=Getlow(nums,target);<br>        <span class="hljs-type">int</span> high=Gethigh(nums,target);<br>        <span class="hljs-keyword">if</span>(low&gt;-<span class="hljs-number">1</span>&amp;&amp;high&gt;-<span class="hljs-number">1</span>)&#123;<br>            number=high-low+<span class="hljs-number">1</span>;<br>        &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> number;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Getlow</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums,<span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-type">int</span> low=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> high=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>            <span class="hljs-type">int</span> mid=(low+high)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]==target)&#123;<br>                <span class="hljs-keyword">if</span>((mid&gt;<span class="hljs-number">0</span> &amp;&amp; nums[mid-<span class="hljs-number">1</span>]!=target)||mid==<span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//注意if条件的顺序，mid&gt;0与mid-1不能调换否则出错</span><br>                    <span class="hljs-keyword">return</span> mid;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                high=mid-<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;target)<br>            &#123;<br>                low=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                high=mid-<span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Gethigh</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums,<span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-type">int</span> low=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> high=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>            <span class="hljs-type">int</span> mid=(low+high)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]==target)&#123;<br>                <span class="hljs-keyword">if</span>((mid&lt;nums.length-<span class="hljs-number">1</span> &amp;&amp; nums[mid+<span class="hljs-number">1</span>]!=target)||mid==nums.length-<span class="hljs-number">1</span>)&#123;   <span class="hljs-comment">//**注意if条件的顺序，mid&lt;nums.length-1与mid+1不能调换否则出错**</span><br>                    <span class="hljs-keyword">return</span> mid;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                low=mid+<span class="hljs-number">1</span>;<br>                <br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;target)<br>            &#123;<br>                low=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                high=mid-<span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>   <br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>归并排序应用</title>
    <link href="/2023/10/05/leetcode/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%BA%94%E7%94%A8/"/>
    <url>/2023/10/05/leetcode/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指Offer51-数组中的逆序对"><a href="#剑指Offer51-数组中的逆序对" class="headerlink" title="剑指Offer51 数组中的逆序对"></a>剑指Offer51 数组中的逆序对</h1><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。<br>示例 1:<br>输入: [7,5,6,4]<br>输出: 5<br>链接：<a href="https://leetcode-cn.com/problems/">https://leetcode-cn.com/problems/</a></p><p><strong>归并排序的核心思想为分治</strong><br>通过修改归并排序得出结果<br>合并阶段本质上是合并两个排序数组的过程，而每当遇到 左子数组当前元素 &gt; 右子数组当前元素 时，意味着 「左子数组当前元素 至 末尾元素」 与 「右子数组当前元素」 构成了若干 「逆序对」 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-type">int</span>[] temp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">reversePairs</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        temp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-keyword">return</span> mergesort(nums,<span class="hljs-number">0</span>,nums.length-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mergesort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums,<span class="hljs-type">int</span> light,<span class="hljs-type">int</span> right)</span>&#123;<br>        <span class="hljs-keyword">if</span>(light&gt;=right) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> mid=(light+right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> res=mergesort(nums,light,mid)+mergesort(nums,mid+<span class="hljs-number">1</span>,right);<br><br>        <span class="hljs-type">int</span> i=light,j=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=light;k&lt;=right;k++)&#123;<br>            temp[k]=nums[k];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=light;k&lt;=right;k++)&#123;<br>            <span class="hljs-keyword">if</span>(i==mid+<span class="hljs-number">1</span>)&#123;<br>                temp[k]=nums[j++];<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==right+<span class="hljs-number">1</span>||temp[i]&lt;=temp[j])&#123;<br>                nums[k]=temp[i++];<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                nums[k]=temp[j++];<br>                res+=mid-i+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//  Scanner in=new Scanner(System.in);</span><br>       <span class="hljs-type">int</span>[] a=&#123;<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>&#125;;<br>       Main t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br>       <span class="hljs-type">int</span> num=t.reversePairs(a);<br>       System.out.println(num);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆排序应用</title>
    <link href="/2023/10/05/leetcode/%E5%A0%86%E6%8E%92%E5%BA%8F%E5%BA%94%E7%94%A8/"/>
    <url>/2023/10/05/leetcode/%E5%A0%86%E6%8E%92%E5%BA%8F%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指Offer41-数据流中的中位数"><a href="#剑指Offer41-数据流中的中位数" class="headerlink" title="剑指Offer41 数据流中的中位数"></a>剑指Offer41 数据流中的中位数</h1><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。<br>例如：<br>[2,3,4] 的中位数是 3<br>[2,3] 的中位数是 (2 + 3) &#x2F; 2 &#x3D; 2.5</p><p>设计一个支持以下两种操作的数据结构：<br>    void addNum(int num) - 从数据流中添加一个整数到数据结构中。<br>    double findMedian() - 返回目前所有元素的中位数。<br>示例 1：<br>输入：<br>[“MedianFinder”,”addNum”,”addNum”,”findMedian”,”addNum”,”findMedian”]<br>[[],[1],[2],[],[3],[]]<br>输出：[null,null,null,1.50000,null,2.00000]<br>示例 2：<br>输入：<br>[“MedianFinder”,”addNum”,”findMedian”,”addNum”,”findMedian”]<br>[[],[2],[],[3],[]]<br>输出：[null,null,2.00000,null,2.50000]</p><p>链接：<a href="https://leetcode-cn.com/problems/">https://leetcode-cn.com/problems/</a></p><p><em>核心思想：用小根堆和大根堆，模拟有序数组的右边和左边。小根堆中的数&gt;大根堆中的数</em><br><em>小根堆数目为M,大根堆中的数为N</em><br><em>M&#x3D;N(总数为偶数) 数据插入到小根堆</em><br><em>M!&#x3D;N(总数为奇数) 数据插入到大根堆</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MedianFinder</span> &#123;<br>    <br>    Queue&lt;Integer&gt; A,B;<br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MedianFinder</span><span class="hljs-params">()</span> &#123;<br>        A=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();               <span class="hljs-comment">//小根堆</span><br>        B=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((x,y)-&gt;(y-x));  <span class="hljs-comment">//大根堆</span><br>    &#125;<br><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNum</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span> m=A.size();<br>        <span class="hljs-type">int</span> n=B.size();<br>        <span class="hljs-keyword">if</span>(m==n)&#123;<br>            B.add(num);<br>            A.add(B.poll());<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            A.add(num);<br>            B.add(A.poll());<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findMedian</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> A.size()!=B.size()?A.peek():(A.peek()+B.peek())/<span class="hljs-number">2.0</span>;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算</title>
    <link href="/2023/10/05/leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2023/10/05/leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指Offer56I-数组中数字出现的次数"><a href="#剑指Offer56I-数组中数字出现的次数" class="headerlink" title="剑指Offer56I 数组中数字出现的次数"></a>剑指Offer56I 数组中数字出现的次数</h1><p>一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。<br>示例 1：<br>输入：nums &#x3D; [4,1,4,6]<br>输出：[1,6] 或 [6,1]<br>示例 2：<br>输入：nums &#x3D; [1,2,10,4,1,4,3,3]<br>输出：[2,10] 或 [10,2]<br>链接：<a href="https://leetcode-cn.com/problems/">https://leetcode-cn.com/problems/</a></p><p><strong>核心思想：如果数值中一个数字出现一次，其他数字出现二次，直接异或则能得出数字</strong><br><em>先分组再异或</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumbers(<span class="hljs-type">int</span>[] nums) &#123;<br><br>        <span class="hljs-type">int</span> resultxor=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            resultxor^=nums[i];<br>        &#125;<br><br>        <span class="hljs-type">int</span> div=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>((div&amp;resultxor)==<span class="hljs-number">0</span>)&#123;<br>            div=div&lt;&lt;<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> nums1=<span class="hljs-number">0</span>,nums2=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>((div&amp;nums[i])==<span class="hljs-number">0</span>)&#123;<br>                nums1^=nums[i];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                nums2^=nums[i];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;nums1,nums2&#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="剑指Offer56II-数组中数字出现的次数"><a href="#剑指Offer56II-数组中数字出现的次数" class="headerlink" title="剑指Offer56II 数组中数字出现的次数"></a>剑指Offer56II 数组中数字出现的次数</h1><p>在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。<br>示例 1：<br>输入：nums &#x3D; [3,4,3,3]<br>输出：4<br>示例 2：<br>输入：nums &#x3D; [9,1,7,9,7,9,7]<br>输出：1<br><strong>将数字二进制的每一位相加，若能被3整除，则出现一次的数的二进制，那一位为0，否则为1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)&#123;<br>            <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;nums.length;j++)&#123;<br>                count+=(nums[j]&gt;&gt;&gt;i)&amp;<span class="hljs-number">1</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(count%<span class="hljs-number">3</span>!=<span class="hljs-number">0</span>)&#123;<br>                res|=<span class="hljs-number">1</span>&lt;&lt;i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/04/hello-world/"/>
    <url>/2023/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>负载均衡加权轮询算法</title>
    <link href="/2023/06/08/Compute_Network/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95/"/>
    <url>/2023/06/08/Compute_Network/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="负载均衡加权轮询算法"><a href="#负载均衡加权轮询算法" class="headerlink" title="负载均衡加权轮询算法"></a>负载均衡加权轮询算法</h1><p>本文借鉴他人博客 (<a href="https://www.cnblogs.com/markcd/p/8456870.html">https://www.cnblogs.com/markcd/p/8456870.html</a>)</p><p>Nginx加权轮询算法思想：<br>    每个节点有三个权重变量，分别是：<br>        weight: 约定权重，即在配置文件或初始化时约定好的每个节点的权重。<br>        effectiveWeight: 有效权重，初始化为weight。<br>                         在通讯过程中发现节点异常，则-1；<br>                         之后再次选取本节点，调用成功一次则+1，直达恢复到weight；<br>       currentWeight: 节点当前权重，初始化为0。<br>1.轮询所有节点，计算当前状态下所有节点的effectiveWeight之和totalWeight<br>2.进入循环：<br>    (1) currentWeight &#x3D; currentWeight + effectiveWeight;<br>    (2)选出所有节点中currentWeight中最大的一个节点作为选中节点；<br>    (3) 选中节点的currentWeight &#x3D; currentWeight - totalWeight；</p><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>三个类:<br>Node类：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> weight ;  <span class="hljs-comment">// 初始权重 （保持不变）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> serverName ; <span class="hljs-comment">// 服务名</span><br><br>    Integer currentWeight ; <span class="hljs-comment">// 当前权重</span><br>    Integer effectiveWeight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-type">String</span> serverName,<span class="hljs-type">int</span> weight)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.serverName=serverName;<br>        <span class="hljs-keyword">this</span>.weight=weight;<br>        <span class="hljs-keyword">this</span>.effectiveWeight=weight;<br>        <span class="hljs-keyword">this</span>.currentWeight=<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">getWeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> weight;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getServerName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> serverName;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Node o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> currentWeight &gt; o.currentWeight ? <span class="hljs-number">1</span> : (currentWeight.<span class="hljs-built_in">equals</span>(o.currentWeight) ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>);  <span class="hljs-comment">//寻找权值最大的节点</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>RoundRobinByWeightLoadBalance类：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">import java.util.*;<br><br>public class RoundRobinByWeightLoadBalance &#123;<br>    private volatile List<span class="hljs-tag">&lt;Node&gt;</span> nodeList = new ArrayList<span class="hljs-tag">&lt;&gt;</span>() ; // 保存权重<br><br>    public RoundRobinByWeightLoadBalance(<span class="hljs-keyword">Node</span> <span class="hljs-title">...nodes</span>) &#123;<br>        for (<span class="hljs-keyword">Node</span> <span class="hljs-title">node</span> : nodes) &#123;<br>            nodeList.add(<span class="hljs-keyword">node</span><span class="hljs-title">) ;</span><br><span class="hljs-title">        &#125;</span><br><span class="hljs-title">    &#125;</span><br><span class="hljs-title"></span><br><span class="hljs-title">    public</span> <span class="hljs-keyword">Node</span> <span class="hljs-title">select</span>()&#123;<br>        int totalweight = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">Node</span> <span class="hljs-title">nodeOfMaxWeight</span>=null;<br>        for (<span class="hljs-keyword">Node</span> <span class="hljs-title">node</span> : nodeList) &#123;<br>            totalweight+=node.effectiveWeight;<br>            node.currentWeight+=node.effectiveWeight;<br><br>            if (nodeOfMaxWeight == null) &#123;<br>                nodeOfMaxWeight = <span class="hljs-keyword">node</span><span class="hljs-title">;</span><br><span class="hljs-title">            &#125;else</span>&#123;<br>                nodeOfMaxWeight = nodeOfMaxWeight.compareTo(<span class="hljs-keyword">node</span><span class="hljs-title">) &gt; 0</span> ? nodeOfMaxWeight : <span class="hljs-keyword">node</span><span class="hljs-title">;</span><br><span class="hljs-title">            &#125;</span><br><span class="hljs-title">        &#125;</span><br><span class="hljs-title">        nodeOfMaxWeight</span>.currentWeight -= totalweight;<br>        return nodeOfMaxWeight;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>Main类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">serverA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;serverA&quot;</span>, <span class="hljs-number">4</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">serverB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;serverB&quot;</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">serverC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;serverC&quot;</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">RoundRobinByWeightLoadBalance</span> <span class="hljs-variable">smoothWeightedRoundRobin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoundRobinByWeightLoadBalance</span>(serverA,serverB ,serverC);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">7</span>; i++) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> smoothWeightedRoundRobin.select();<br>            System.out.println(i1.getServerName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Computer_Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
